Library IEEE;  Use IEEE.STD_LOGIC_1164.ALL;  Entity half_adder is  Port (a, b: in std_logic;  Sum, Carry: out std_logic);  End half_adder;  
 
Architecture Behavioral of half_adder is  Begin  Sum <= (a xor b);  Carry <= (a and b);  End Behavioral; 


Library IEEE;  Use IEEE.STD_LOGIC_1164.ALL;  Entity full_adder is  Port (a, b, c: in std_logic;  Sum, Carry: out std_logic);  End full_adder;  
 
Architecture Behavioral of full_adder is  Begin  Sum <= (a xor b xor c);  Carry <= ((a and b) or (b and c) or (a and c));  End Behavioral; 


Library ieee;  
Use ieee.std_logic_1164.all;  
ENTITY mux4_1 IS  
Port (a, b, c, d: in std_logic;  
S: in std_logic_vector (1 downto 0); 
Y: out std_logic);  
End mux4_1;  
 
Architecture behavioral of mux4_1 is 
BEGIN  
With s select  
Y<=  a when"00",
b when "01", 
c when "10",
d when OTHERS;  
End behavioral;

library IEEE; use IEEE.STD_LOGIC_1164.all; 
 
entity Binary_to_Gray is      port(          din : in STD_LOGIC_VECTOR(3 downto 0);          dout : out STD_LOGIC_VECTOR(3 downto 0)          ); end Binary_to_Gray; 
 
 
architecture Binary_to_Gray_arc of Binary_to_Gray is begin 
 
    btog : process (din) is     begin         case din is             when "0000" => dout <= "0000";             when "0001" => dout <= "0001";             when "0010" => dout <= "0011";             when "0011" => dout <= "0010";             when "0100" => dout <= "0110";             when "0101" => dout <= "0111";             when "0110" => dout <= "0101";             when "0111" => dout <= "0100";             when "1000" => dout <= "1100";             when "1001" => dout <= "1101";             when "1010" => dout <= "1111";             when "1011" => dout <= "1110";             when "1100" => dout <= "1010";             when "1101" => dout <= "1011";             when "1110" => dout <= "1001";             when others => dout <= "1000";         end case;     end process btog; 
 
end Binary_to_Gray_arc; 


library IEEE; use IEEE.STD_LOGIC_1164.all; 
 
entity Gray_to_Binary is      port(          din : in STD_LOGIC_VECTOR(3 downto 0);          dout : out STD_LOGIC_VECTOR(3 downto 0)          ); end Gray_to_Binary; 
 
 
architecture Gray_to_Binary_arc of Gray_to_Binary is begin 
 
    btog : process (din) is     begin         case din is             when "0000" => dout <= "0000";             when "0001" => dout <= "0001";             when "0010" => dout <= "0011";             when "0011" => dout <= "0010";             when "0100" => dout <= "0111";             when "0101" => dout <= "0110";             when "0110" => dout <= "0100";             when "0111" => dout <= "0101";             when "1000" => dout <= "1111";             when "1001" => dout <= "1110";             when "1010" => dout <= "1100";             when "1011" => dout <= "1101";             when "1100" => dout <= "1000";             when "1101" => dout <= "1001";             when "1110" => dout <= "1011";             when others => dout <= "1010";         end case;     end process btog; 
 
end Gray_to_Binary_arc; 
